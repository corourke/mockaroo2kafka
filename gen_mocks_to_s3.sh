# Data Generator - AWS S3 Version
# Call Mockaroo to get data, and upload it to an S3 bucket


# Default Values
: "${DATA_DIR:=/tmp/scans}"
: "${PREFIX:=scan}"
: "${REGION:=1}"
: "${S3_LOCATION=s3://acme-retail-data}"

STATUS_FILE=$DATA_DIR/data_loader_status

# Prechecks
if [ ! -d $DATA_DIR ]; then
	echo "Please ensure that $DATA_DIR is writable."
  exit 1
fi
if [ ! -f $STATUS_FILE ]; then
  echo "creating status file"
  echo "EPOCH" `date` > $STATUS_FILE
fi
if [ ! -d $DATA_DIR/stage ]; then
  echo "creating $DATA_DIR/stage directory"
  mkdir $DATA_DIR/stage
fi
if [ ! -d $DATA_DIR/processed ]; then
  echo "creating $DATA_DIR/processed directory"
  mkdir $DATA_DIR/processed
fi

# Check that AWS CLI is installed
if [ ! -d ~/.aws ]; then
  echo "AWS Command Line Interface not installed or configured."
  echo " Try:  $ pip install awscli --upgrade --user"
  echo " Then: $ aws configure"
  exit 1
fi
set -e

# When user wants to exit, shut down gracefully
cleanup ()
{
  echo "STOP" `date` >> $STATUS_FILE
  rm -f $scan_file
  exit 0
}
trap cleanup SIGINT SIGTERM
echo "START" `date` >> $STATUS_FILE

# Create and upload files until told to stop
while [ `tail -1 $STATUS_FILE | cut -d " " -f 1` != "STOP" ]
do
  # Get new sample data rows
  timestamp=`date "+%s"`
  scan_file="$DATA_DIR/stage/${PREFIX}${REGION}_${timestamp}.json"
  # Replace the mockaroo call with the one given to you by mockaroo
  # Note we are generating 100 rows. You can go to 1000 rows here for free
  curl --silent "https://api.mockaroo.com/api/91b59790?count=100&key=76b93870" > $scan_file
  echo "FILE " $scan_file `date` # >> $STATUS_FILE
  scan_file=""

  # Upload files generated by this instance (region) to S3 and archive
  for file in $DATA_DIR/stage/${PREFIX}${REGION}_*.json
  do
    aws s3 cp $file ${S3_LOCATION}
    if [ $? -ne 0 ]; then
      echo "Exiting due to upload error"
      exit;
    fi
    echo "UPLOAD " $file `date` # >> $STATUS_FILE 
    mv $file $DATA_DIR/processed
  done

  # Check the datetime formula in the mockaroo schema to ensure that it gives you the right
  # timeframe. The formula produces times within the last 5 minutes
  # (now() - minutes(random(0,4)) - seconds(random(0,59)))
  sleep 240
done
